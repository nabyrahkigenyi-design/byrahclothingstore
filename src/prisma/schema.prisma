// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role { ADMIN CUSTOMER }
enum ProductStatus { ACTIVE ARCHIVED DRAFT }
enum OrderStatus { PENDING PAID FULFILLED CANCELLED REFUNDED }

model User {
  id        String    @id @default(cuid())
  name      String?
  email     String?   @unique
  image     String?
  role      Role      @default(CUSTOMER)
  addresses Address[]
  orders    Order[]
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Category {
  id        String     @id @default(cuid())
  name      String
  slug      String     @unique
  parentId  String?
  parent    Category?  @relation("Subcats", fields: [parentId], references: [id])
  children  Category[] @relation("Subcats")
  heroImage String?
  createdAt DateTime   @default(now())
}

model Product {
  id          String           @id @default(cuid())
  name        String
  slug        String           @unique
  description String
  priceUGX    Int
  sku         String           @unique
  status      ProductStatus    @default(ACTIVE)
  categories  ProductCategory[]
  images      ProductImage[]
  variants    Variant[]
  tags        String[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model ProductCategory {
  productId  String
  categoryId String
  product    Product  @relation(fields: [productId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
  @@id([productId, categoryId])
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  alt       String
  position  Int
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Variant {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  size      String
  color     String?
  stock     Int     @default(0)
  barcode   String? @unique
}

model Order {
  id          String      @id @default(cuid())
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  email       String
  status      OrderStatus @default(PENDING)
  items       OrderItem[]
  totalUGX    Int
  shippingUGX Int
  pickup      Boolean     @default(false)
  address     Address?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  variant   Variant @relation(fields: [variantId], references: [id])
  variantId String
  qty       Int
  priceUGX  Int
}

model Address {
  id      String  @id @default(cuid())
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  name    String
  phone   String
  line1   String
  line2   String?
  city    String
  region  String?
  country String  @default("UG")
  postal  String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
