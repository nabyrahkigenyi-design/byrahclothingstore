generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =================== ENUMS ===================
 */

enum Role {
  CUSTOMER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  ARCHIVED
  DRAFT
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  CANCELLED
  REFUNDED
}

/**
 * ================ AUTH MODELS ================
 */

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  // >> ADDED FIELD <<
  emailVerified   DateTime? // For magic-link/email sign-in tracking
  image           String?
  role            Role      @default(CUSTOMER)
  passwordHash    String?

  addresses       Address[]
  orders          Order[]
  accounts        Account[]
  sessions        Session[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// >> ADDED MODEL for Magic Link <<
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ============== CATALOG MODELS ==============
 */

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  slug      String   @unique
  heroImage String?
  parentId  Int?

  parent    Category? @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Category[] @relation("CategoryHierarchy")

  products ProductCategory[]
}

model Product {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  slug        String        @unique
  description String        @db.Text
  priceUGX    Int
  sku         String        @unique
  tags        String[]
  status      ProductStatus @default(ACTIVE)

  images      Image[]
  categories  ProductCategory[]
  variants    Variant[]
  orderItems  OrderItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  alt       String?
  position  Int

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Variant {
  id        Int      @id @default(autoincrement())
  size      String   @db.VarChar(50)
  stock     Int      @default(0)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderItems OrderItem[]
}

model ProductCategory {
  productId  Int
  categoryId Int

  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
}

/**
 * ========= ORDER + ADDRESS MODELS =========
 */

model Address {
  id      Int     @id @default(autoincrement())
  // order shipping fields
  name    String
  phone   String
  line1   String
  line2   String?
  city    String
  region  String?
  country String  @default("UG")
  postal  String?

  // optional owner
  userId  String?
  user    User?   @relation(fields: [userId], references: [id])

  orders Order[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])

  email       String
  status      OrderStatus @default(PENDING)
  totalUGX    Int
  shippingUGX Int
  pickup      Boolean     @default(false)

  items OrderItem[]

  addressId Int?
  address   Address? @relation(fields: [addressId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id Int @id @default(autoincrement())

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  qty       Int
  priceUGX  Int
}